{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3vKschpng89wFHeooeovg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Luke-687/Chemotaxis-Project-With-RL/blob/main/Example_3_3_Recycling_Robot.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "CUMyOTfJPRcI"
      },
      "outputs": [],
      "source": [
        "states = [\"high\", \"low\"]\n",
        "actions = {\n",
        "    \"high\": [\"wait\", \"search\"],\n",
        "    \"low\": [\"wait\", \"search\", \"recharge\"]\n",
        "}\n",
        "\n",
        "a = 0.9\n",
        "b = 0.5\n",
        "r_search = 1\n",
        "r_wait = 0.5\n",
        "r_rescue = -3\n",
        "r_recharge = 0\n",
        "\n",
        "transitions = {\n",
        "    (\"high\",\"search\"): [(\"high\", a, r_search), (\"low\", 1-a, r_search)],\n",
        "    (\"high\", \"wait\"): [(\"high\", 1.0, r_wait)],\n",
        "    (\"low\", \"search\"): [(\"low\", b, r_search), (\"high\", 1-b, r_rescue)],\n",
        "    (\"low\", \"wait\"): [(\"low\", 1.0, r_wait)],\n",
        "    (\"low\", \"recharge\"): [(\"high\", 1.0, r_recharge)]\n",
        "}\n",
        "\n",
        "def optimizer(states, actions, transitions, g = 0.90, t = 0.001):\n",
        "  V = {s: 0 for s in states}\n",
        "  policy = {s: None for s in states}\n",
        "\n",
        "  check = True\n",
        "  while check:\n",
        "    d = 0\n",
        "    for s in states:\n",
        "      actValues = {}\n",
        "      for a in actions[s]:\n",
        "        sum = 0\n",
        "        for (s_next, prob, reward) in transitions[(s, a)]:\n",
        "          sum += prob * (reward + g * V[s_next])\n",
        "        actValues[a] = sum\n",
        "      maxAct = max(actValues, key = actValues.get)\n",
        "      d = max(d, abs(V[s] - actValues[maxAct]))\n",
        "      V[s] = actValues[maxAct]\n",
        "      policy[s] = maxAct\n",
        "    if(t>d):\n",
        "      check = False\n",
        "  return V, policy"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "V, policy = optimizer(states, actions, transitions)\n",
        "print(\"Predicted values for states are: \\n\")\n",
        "print(\"High: \", V[\"high\"])\n",
        "print(\"Low: \", V[\"low\"])\n",
        "print(\"\\n\\n\")\n",
        "print(\"Best policy given states: \\n\")\n",
        "print(\"High:\", policy[\"high\"])\n",
        "print(\"Low:\", policy[\"low\"])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1zn2mppzfams",
        "outputId": "2be3b151-226e-4766-d32b-777e854b0e47"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted values for states are: \n",
            "\n",
            "High:  9.166274566103306\n",
            "Low:  8.249647109492976\n",
            "\n",
            "\n",
            "\n",
            "Best policy given states: \n",
            "\n",
            "High: search\n",
            "Low: recharge\n"
          ]
        }
      ]
    }
  ]
}
